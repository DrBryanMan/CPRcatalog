import { initSearch } from './js/search.js'

let allAnimes = []
let allReleases = []
let allTeams = []
let hikkaAnimeData = []

async function loadData() {
    if (allAnimes.length === 0) {
        try {
            const [animeData, teamData, releaseData, hikkaData] = await Promise.all([
                fetch('AnimeTitlesDB.json').then(res => res.json()),
                fetch('TeamsDB.json').then(res => res.json()),
                fetch('AnimeReleasesDB.json').then(res => res.json()),
                fetch('hikkaData.json').then(res => res.json())
            ])
            hikkaAnimeData = hikkaData
            allAnimes = animeData.map(anime => ({
                id: anime.id,
                hikkaUrl: anime.properties.Hikka.url,
                cover: anime.cover?.external?.url || anime.cover?.file?.url,
                poster: anime.properties.–ü–æ—Å—Ç–µ—Ä.files[0]?.external?.url || anime.properties.–ü–æ—Å—Ç–µ—Ä.files[0]?.file.url,
                title: anime.properties['–ù–∞–∑–≤–∞ —Ç–∞–π—Ç–ª—É'].title[0]?.plain_text || '–ë–µ–∑ –Ω–∞–∑–≤–∏',
                romaji: anime.properties.–†–æ–º–∞–¥–∂—ñ.rich_text[0]?.plain_text || '',
                type: anime.properties["–¢–∏–ø –º–µ–¥—ñ–∞"].multi_select[0]?.name || '',
                format: anime.properties.–§–æ—Ä–º–∞—Ç.select?.name || '',
                year: anime.properties["–†—ñ–∫ –≤–∏—Ö–æ–¥—É"].rich_text[0]?.plain_text || '',
                episodes: anime.properties["–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–µ—Ä—ñ–π"].rich_text[0]?.plain_text || '',
                releases: anime.properties['üóÇÔ∏è –†–µ–ª—ñ–∑–∏ –∫–æ–º–∞–Ω–¥'].relation || []
            }))
            allAnimes = allAnimes.map(anime => ({
                ...anime,
                hikkaPoster: hikkaAnimeData.find(hikka => hikka.url === anime.hikkaUrl)?.poster
            }))
            allTeams = teamData.map(team => ({
                id: team.id,
                logo: team.icon?.file?.url,
                name: team.properties['–ù–∞–∑–≤–∞ –∫–æ–º–∞–Ω–¥–∏'].title[0]?.plain_text || '–ù–µ–≤—ñ–¥–æ–º–æ',
                releases: team.properties['–†–µ–ª—ñ–∑–∏ –∞–Ω—ñ–º–µ'].relation || []
            }))
            allReleases = releaseData.map(release => ({
                id: release.id,
                animeId: release.properties['–¢–∞–π—Ç–ª']?.relation[0]?.id || "",
                title: release.properties['Name'].title[0]?.plain_text || '–ë–µ–∑ –Ω–∞–∑–≤–∏',
                cover: release.cover?.external?.url || release.cover?.file?.url || "",
                poster: release.properties.–ü–æ—Å—Ç–µ—Ä.files[0]?.external?.url || release.properties.–ü–æ—Å—Ç–µ—Ä.files[0]?.file.url,
                teams: (release.properties['–ö–æ–º–∞–Ω–¥–∞']?.relation || [])
                .map(r => ({
                    logo: allTeams.find(t => t.id === r?.id)?.logo || '–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞',
                    name: allTeams.find(t => t.id === r?.id)?.name || '–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞'
                })),
                status: release.properties['–°—Ç–∞—Ç—É—Å'].status?.name || '–ù–µ–≤—ñ–¥–æ–º–æ',
                episodes: release.properties['–ö—ñ–ª—å–∫—ñ—Å—Ç—å'].rich_text[0]?.plain_text || '–ù–µ–≤—ñ–¥–æ–º–æ',
                torrent: release.properties['–¢–æ—Ä–µ–Ω—Ç'].select?.name || '–ù–µ–≤—ñ–¥–æ–º–æ',
                // torrentLink: release.properties['–¢–æ—Ä–µ–Ω—Ç –ø–æ—Å–∏–ª–∞–Ω–Ω—è'].rich_text[0]?.text.link?.url || '#',
                torrentLinks: release.properties['–¢–æ—Ä–µ–Ω—Ç –ø–æ—Å–∏–ª–∞–Ω–Ω—è'].rich_text
                .filter(link => link.href !== null)
                .map(link => ({
                    text: link.plain_text,
                    href: link.href
                }))
            }))
            allReleases = allReleases.map(release => ({
                ...release,
                animeData: allAnimes.find(anime => anime.id === release.animeId)
            }))
            // console.log(allReleases[108].torrentLinks)
        } catch (error) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö:", error)
            throw error
        }
    }
}

function renderStatistics() {
    const statsSection = document.createElement('div')
    statsSection.classList.add('statistics-section')
    statsSection.innerHTML = `
        <h2>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ç–∞–ª–æ–≥—É</h2>
        <div class="stats-container">
            <div class="stat-item">
                <span class="stat-value">${allAnimes.length}</span>
                <span class="stat-label">–ê–Ω—ñ–º–µ</span>
            </div>
            <div class="stat-item">
                <span class="stat-value">${allReleases.length}</span>
                <span class="stat-label">–†–µ–ª—ñ–∑—ñ–≤</span>
            </div>
            <div class="stat-item">
                <span class="stat-value">${allTeams.length}</span>
                <span class="stat-label">–ö–æ–º–∞–Ω–¥</span>
            </div>
        </div>
    `
    return statsSection
}

function renderRandomAnime() {
    const anime = allAnimes[Math.floor(Math.random() * allAnimes.length)]
    const randomAnimeSection = document.createElement('div')
    randomAnimeSection.classList.add('random-anime-section')
    randomAnimeSection.innerHTML = `
        <h2>–í–∏–ø–∞–¥–∫–æ–≤–µ –∞–Ω—ñ–º–µ</h2>
        <div class="random-anime-container page-block">
            <img src="${anime.poster || anime.hikkaPoster}" alt="${anime.title}" class="random-anime-poster">
            <div class="random-anime-info">
                <h3 class="truncate">${anime.title}</h3>
                <p>${anime.romaji}</p>
                <p>–¢–∏–ø: ${anime.type}</p>
                <p>–§–æ—Ä–º–∞—Ç: ${anime.format}</p>
                <p>–†—ñ–∫: ${anime.year}</p>
                <p>–ï–ø—ñ–∑–æ–¥–∏: ${anime.episodes}</p>
            </div>
        </div>
    `
    return randomAnimeSection
}

// –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–µ–∫—Ü—ñ—ó —Ä–µ–ª—ñ–∑—ñ–≤
async function renderReleasesSection(releases, title) {
    const section = document.createElement('div')
    section.classList.add('releases-section')
    section.innerHTML = `<h2>${title}</h2>`

    const releaseList = document.createElement('div')
    releaseList.classList.add('release-list')

    for (const release of releases) {
        const animeData = allAnimes.find(anime => anime.id === release.animeId)
        const teams = release.teams.map(t => `<img src="${t.logo}">${t.name}`)
        const listItem = document.createElement('div')
        listItem.classList.add('release-card')
        listItem.innerHTML = `
            <img src="${animeData?.cover || release?.cover || '' }" class="release-poster">
            <div class="release-info">
                <h3 class="truncate">${release.title}</h3>
                <p class='teams-logos'>${teams}</p>
                <p>–ï–ø—ñ–∑–æ–¥–∏: ${release.episodes}</p>
            </div>
        `
        listItem.onclick = () => renderReleaseDetail(release, 'toReleaseList')
        releaseList.appendChild(listItem)
    }

    section.appendChild(releaseList)
    return section
}

// –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–∞—Ä—Ç–æ–∫ —Ä–µ–ª—ñ–∑—ñ–≤
async function renderAnimeReleases(releases) {
    const cardsContainer = document.createElement('div')
    cardsContainer.classList.add('anime-releases-container')

    for (const release of releases) {
        const card = document.createElement('div')
        card.classList.add('release-card')

        const animeData = allAnimes.find(anime => anime.id === release.animeId)
        const teams = release.teams.map(t => `<img src="${t.logo}">${t.name}`)

        card.innerHTML = `
            <img src="${release.cover}" class="anime-poster">
            <h3 class="truncate">${release.title}</h3>
            <p class='teams-logos'>${teams}</p>
            <p>–ï–ø—ñ–∑–æ–¥–∏: ${release.episodes}</p>
        `

        card.onclick = () => renderReleaseDetail(release, 'toTitle')
        cardsContainer.appendChild(card)
    }

    return cardsContainer
}

// –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π —Ä–µ–ª—ñ–∑—É
async function renderReleaseDetail(release, backPage) {
    showLoader()
    try {
        const app = document.getElementById("app")
        app.innerHTML = ""

        const detailDiv = document.createElement("div")
        detailDiv.classList.add("release-detail")

        const anime = allAnimes.find(a => a.id === release.animeId)
        const teams = release.teams.map(t => `<img src="${t.logo}">${t.name}`)
        const torrents = release.torrentLinks.map(t => `<a href="${t.url}" target="_blank">${t.text}</a>`).join('')

        detailDiv.innerHTML = `
        <div class="anime-cover"><img src="${anime.cover}"></div>
        <div class="top-section">
            <img class="anime-poster" src="${release.poster || anime.poster || anime.hikkaPoster}">
            <div class="release">
                <div>
                    <h1>${release.title}</h1>
                </div>
                <div class="release-info">
                    <p>–ê–Ω—ñ–º–µ: ${anime?.title || '–ù–µ–≤—ñ–¥–æ–º–µ –∞–Ω—ñ–º–µ'}</p>
                    <p class='teams-logos'>–ö–æ–º–∞–Ω–¥–∞: ${teams}</p>
                    <p>–°—Ç–∞—Ç—É—Å: ${release.status}</p>
                    <p>–ï–ø—ñ–∑–æ–¥–∏: ${release.episodes}</p>
                    <p>–¢–æ—Ä–µ–Ω—Ç: ${release.torrent}</p>
                    <p class='release-torrents'>${torrents}</p>
                </div>
                <button id="backToReleasesButton">–î–æ —Å–ø–∏—Å–∫—É —Ä–µ–ª—ñ–∑—ñ–≤</button>
            </div>
        </div>
        `

        app.appendChild(detailDiv)

        const backButton = detailDiv.querySelector('#backToReleasesButton')
        if (backPage === 'toReleaseList') {
            backButton.textContent = '–î–æ —Å–ø–∏—Å–∫—É —Ä–µ–ª—ñ–∑—ñ–≤'
            backButton.onclick = () => renderAnimeList(allReleases, "Release")
        } else if (backPage === 'toTitle') {
            backButton.textContent = '–î–æ —Ç–∞–π—Ç–ª—É'
            backButton.onclick = () => renderAnimeDetail(anime, "toAnimeList")
        }
    } finally {
        hideLoader()
    }
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–µ—Ç–∞–ª–µ–π –∞–Ω—ñ–º–µ
async function renderAnimeDetail(anime, backPage) {
    showLoader()
    try {
        // isViewingAnimeDetail = true
        app.innerHTML = ""
        // currentAnime = anime

        const detailDiv = document.createElement("div")
        detailDiv.classList.add("anime-detail")

        // –ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∞–Ω—ñ–º–µ
        detailDiv.innerHTML = `
        <div class="anime-cover"><img src="${anime.cover}"></div>
        <div class="top-section">
            <img class="anime-poster" src="${anime.poster || anime.hikkaPoster}" title="${anime.title}">
            <div class="title">
                <div>
                    <h1>${anime.title}</h1>
                    <span>${anime.romaji}</span>
                </div>
                <div class="anime-info">
                    <p>–¢–∏–ø: ${anime.type}</p>
                    <p>–§–æ—Ä–º–∞—Ç: ${anime.format}</p>
                    <p>–†—ñ–∫: ${anime.year}</p>
                    <p>–ï–ø—ñ–∑–æ–¥–∏: ${anime.episodes}</p>
                </div>
                <div id="releasesList" class=''>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ä–µ–ª—ñ–∑–∏...</div>
                <button id="backButton">–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å</button>
            </div>
        </div>
        `

        app.appendChild(detailDiv)

        // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ä–µ–ª—ñ–∑–∏
        const releases = anime.releases ? allReleases.filter(r => r.animeId === anime.id) : []
        const releasesList = document.getElementById("releasesList")
        if (releases.length > 0) {
            const releaseCards = await renderAnimeReleases(releases)
            releasesList.innerHTML = '<h3>–†–µ–ª—ñ–∑–∏:</h3>'
            releasesList.appendChild(releaseCards)
        } else {
            releasesList.innerHTML = "<p>–†–µ–ª—ñ–∑–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</p>"
        }

        const backButton = detailDiv.querySelector("#backButton")
        if (backPage === 'toAnimeList') {
            backButton.textContent = '–î–æ —Å–ø–∏—Å–∫—É –∞–Ω—ñ–º–µ'
            backButton.onclick = () => {
                renderAnimeList(allAnimes, "Anime")
            }
        }
    } finally {
        hideLoader()
    }
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–ø–∏—Å–∫—É –∞–Ω—ñ–º–µ
function renderAnimeList(items, typeofList) {
    const itemsPerPage = 50
    let currentPage = 0
    let filteredItems = [...items]
    console.log(filteredItems)
    app.innerHTML = ""
    
    // –î–æ–¥–∞—î–º–æ –ø–æ–ª–µ –ø–æ—à—É–∫—É
    const searchDiv = document.createElement("div")
    searchDiv.classList.add("search-container")
    searchDiv.innerHTML = `
        <input type="text" id="localSearchInput" placeholder="–ü–æ—à—É–∫...">
    `
    app.appendChild(searchDiv)
    
    const listDiv = document.createElement("div")
    listDiv.classList.add("anime-list")
    app.appendChild(listDiv)

    const searchInput = document.getElementById("localSearchInput")
    searchInput.addEventListener('input', handleSearch)

    function handleSearch() {
        const searchTerm = searchInput.value.toLowerCase()
        console.log(searchTerm)
        filteredItems = items.filter(item => {
            if (typeofList === "Anime") {
                return item.title.toLowerCase().includes(searchTerm) || 
                       item.romaji.toLowerCase().includes(searchTerm)
            } else {
                return item.title.toLowerCase().includes(searchTerm) || 
                       (allAnimes.find(anime => anime.id === item.animeId)?.title.toLowerCase().includes(searchTerm))
            }
        })
        console.log(filteredItems)
        
        currentPage = 0
        listDiv.innerHTML = ""
        loadMoreItems()
    }

    function loadMoreItems() {
        const startIndex = currentPage * itemsPerPage
        const endIndex = startIndex + itemsPerPage
        const itemsToRender = filteredItems.slice(startIndex, endIndex)
        
        itemsToRender.forEach((item) => {
            const card = document.createElement("div")
            card.classList.add(typeofList === "Anime" ? "title-card" : "release-card")
            
            if (typeofList === "Anime") {
                // const hikkaPoster = hikkaAnimeData.find(hikka => hikka.url === item.hikkaUrl)
                card.innerHTML = `
                    <div class="poster-box">
                        <img src="${item.poster || item.hikkaPoster}" title="${item.title}">
                    </div>
                    <div class='title-info'>
                        <span class="truncate" title="${item.title}">${item.title}</span>
                        <small>${item.year} / ${item.format}</small>
                    </div>
                `
                card.onclick = () => renderAnimeDetail(item, 'toAnimeList')
            } else {
                const anime = allAnimes.find(anime => anime.id === item.animeId)
                const teams = item.teams.map(t => `<img src="${t.logo}">${t.name}`)
                if (!anime) return
                card.innerHTML = `
                    <img src="${anime.cover}" alt="" class="release-poster">
                    <div class="release-info">
                        <h3 class="truncate">${item.title}</h3>
                        <p class='teams-logos'>${teams}</p>
                        <p>–ï–ø—ñ–∑–æ–¥–∏: ${item.episodes}</p>
                    </div>
                `
                card.onclick = () => renderReleaseDetail(item, 'toReleaseList')
            }
            
            listDiv.appendChild(card)
        })

        currentPage++
        
        if (endIndex >= filteredItems.length) {
            window.removeEventListener('scroll', handleScroll)
        } else {
            window.addEventListener('scroll', handleScroll)
        }
    }

    function handleScroll() {
        if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight - 500) {
            loadMoreItems()
        }
    }

    loadMoreItems() // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–µ—Ä—à—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
const animeButton = document.getElementById("animeButton")
animeButton.onclick = () => renderAnimeList(allAnimes, "Anime")
const releasesButton = document.getElementById("releasesButton")
releasesButton.onclick = () => renderAnimeList(allReleases, "Release")

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É –≥–æ–ª–æ–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
async function renderHomePage() {
    showLoader()
    try {
        app.innerHTML = "<h1>–ö–∞—Ç–∞–ª–æ–≥ –§–∞–Ω–¥–∞–±—É!</h1>"
        const randomAnimeSection = renderRandomAnime()

        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–ª–æ–∫—É –∑ –æ—Å—Ç–∞–Ω–Ω—ñ–º–∏ —Ä–µ–ª—ñ–∑–∞–º–∏
        const recentReleasesSection = await renderReleasesSection(allReleases.slice(0, 8), "–û—Å—Ç–∞–Ω–Ω—ñ –¥–æ–¥–∞–Ω—ñ —Ä–µ–ª—ñ–∑–∏")
        const recentReleasesButton = document.createElement('button')
        recentReleasesButton.textContent = '–í—Å—ñ —Ä–µ–ª—ñ–∑–∏'
        recentReleasesButton.onclick = () => renderAnimeList(allReleases, "Release")
        recentReleasesSection.appendChild(recentReleasesButton)
        
        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–ª–æ–∫—É –∑ –ø–æ—Ç–æ—á–Ω–∏–º–∏ —Ä–µ–ª—ñ–∑–∞–º–∏
        const currentReleasesSection = await renderReleasesSection(allReleases.filter(release => release.status === "–í –ø—Ä–æ—Ü–µ—Å—ñ").slice(0, 8), "–ü–æ—Ç–æ—á–Ω—ñ —Ä–µ–ª—ñ–∑–∏")
        const currentReleasesButton = document.createElement('button')
        currentReleasesButton.textContent = '–í—Å—ñ –ø–æ—Ç–æ—á–Ω—ñ —Ä–µ–ª—ñ–∑–∏'
        currentReleasesButton.onclick = () => renderAnimeList(allReleases.filter(r => r.status === '–í –ø—Ä–æ—Ü–µ—Å—ñ'), "Release")
        currentReleasesSection.appendChild(currentReleasesButton)

        const statsSection = renderStatistics()

        app.appendChild(randomAnimeSection)
        app.appendChild(recentReleasesSection)
        app.appendChild(currentReleasesSection)
        app.appendChild(statsSection)
    } finally {
        hideLoader()
    }
}

// –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞ –≥–æ–ª–æ–≤–Ω—É"
const homeButton = document.getElementById("homeButton")
homeButton.onclick = renderHomePage

function showLoader() {
    document.getElementById('loading-overlay').style.display = 'flex'
}
function hideLoader() {
    document.getElementById('loading-overlay').style.display = 'none'
}

// –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≥–æ–ª–æ–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
document.addEventListener('DOMContentLoaded', async () => {
    try {
        showLoader()
        console.log('DOM loaded, initializing...')
        await loadData()
        console.log('Data loaded')
        initSearch(allAnimes, allReleases, allTeams, renderAnimeDetail, renderReleaseDetail)
        console.log('Search initialized')
        await renderHomePage()
        console.log('Home page rendered')
    } catch (error) {
        console.error('Error during initialization:', error)
        hideLoader()
        document.getElementById('app').innerHTML = `<p>–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ: ${error.message}</p>`
    } finally {
        hideLoader()
    }
})