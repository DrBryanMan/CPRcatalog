const { Client } = require("@notionhq/client")
const axios = require('axios')
const fs = require("fs").promises
const path = require("path")
require("dotenv").config()

const HIKKA_API_URL = 'https://api.hikka.io/anime'
const Notion = new Client({ 
  auth: process.env.NOTION_TOKEN,
  timeoutMs: 60000  // –ó–±—ñ–ª—å—à—É—î–º–æ timeout –¥–æ 60 —Å–µ–∫—É–Ω–¥
 })

// –î–æ–¥–∞—î–º–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è –∫–æ–ª—å–æ—Ä—ñ–≤
const colors = {
  reset: "\x1b[0m",
  red: "\x1b[31m",
  green: "\x1b[32m",
  yellow: "\x1b[33m",
  blue: "\x1b[34m"
}
const OUTPUT_MODES = {
  NEWLINE: 'newline',    // –ó–≤–∏—á–∞–π–Ω–∏–π –≤–∏–≤—ñ–¥ –∑ –Ω–æ–≤–∏–º —Ä—è–¥–∫–æ–º
  SAMELINE: 'sameline',  // –í–∏–≤—ñ–¥ –≤ —Ç–æ–π —Å–∞–º–∏–π —Ä—è–¥–æ–∫
  PROGRESS: 'progress'   // –í–∏–≤—ñ–¥ –ø—Ä–æ–≥—Ä–µ—Å—É –∑ –æ—á–∏—â–µ–Ω–Ω—è–º
}

process.stdout.setEncoding('utf8')
if (process.stdout.isTTY) {
  process.stdout.setNoDelay(true)
}

function colorLog(message, color = 'reset', mode = OUTPUT_MODES.NEWLINE) {
  const coloredMessage = `${colors[color]}${message}${colors.reset}`
  
  switch(mode) {
    case OUTPUT_MODES.SAMELINE:
      process.stdout.write(`\r${coloredMessage}`)
      break
    case OUTPUT_MODES.PROGRESS:
      process.stdout.write(`${coloredMessage}\n`)
      break
    case OUTPUT_MODES.NEWLINE:
    default:
      process.stdout.write(`${coloredMessage}\n`)
  }
}

async function getPageById(pageId) {
  try {
    const response = await Notion.pages.retrieve({
      page_id: pageId,
    })
    return response
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö:', error)
    throw error
  }
}

async function getAllPages(databaseId, dbTitle, propertiesToExpand = []) {
  let pages = []
  let hasMore = true
  let nextCursor = null
  let pageCount = 0
  let totalProcessed = 0
  
  console.log(`–ü–æ—á–∞—Ç–æ–∫ —ñ–º–ø–æ—Ä—Ç—É —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö ${dbTitle}`)

  while (hasMore) {
    const response = await Notion.databases.query({
      database_id: databaseId,
      start_cursor: nextCursor || undefined,
      // page_size: 100
    })

    const newPages = response.results
    totalProcessed += newPages.length
    colorLog(`–û—Ç—Ä–∏–º–∞–Ω–æ ${totalProcessed} —Å—Ç–æ—Ä—ñ–Ω–æ–∫...`, 'reset', OUTPUT_MODES.PROGRESS)
    
    pages = pages.concat(response.results)
    // hasMore = false
    hasMore = response.has_more
    nextCursor = response.next_cursor
  }
  colorLog(`\n–ó–∞–≤–µ—Ä—à–µ–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–æ–∫. –í—Å—å–æ–≥–æ: ${totalProcessed}`, 'reset')

  if (propertiesToExpand.length > 0) {
    colorLog(`–ü–æ—á–∞—Ç–æ–∫ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π: ${propertiesToExpand.join(', ')}`, 'reset')
    const processedPages = []
    for (const page of pages) {
      try {
        const processedPage = { ...page }
        for (const propertyName of propertiesToExpand) {
          if (processedPage.properties[propertyName]?.type === 'relation') {
            await new Promise(resolve => setTimeout(resolve, 100))
            try {
              const expandedRelations = await getAllRelatedIds(processedPage.id, processedPage.properties[propertyName].id)
              processedPage.properties[propertyName].relation = expandedRelations.map(id => ({ id }))
              processedPage.properties[propertyName].has_more = false
            } catch (error) {
              console.error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–≤'—è–∑–∫—ñ–≤ –¥–ª—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ ${processedPage.id}:`, error.message)
              processedPage.properties[propertyName].relation = []
              processedPage.properties[propertyName].has_more = false
            }
          }
        }
        processedPages.push(processedPage)
        pageCount++
        colorLog(`–û–±—Ä–æ–±–∫–∞ ${pageCount}/${pages.length}: ${processedPage.properties['–ù–∞–∑–≤–∞ –∫–æ–º–∞–Ω–¥–∏']?.title[0]?.plain_text || 
          processedPage.id}`, 'yellow', OUTPUT_MODES.PROGRESS)
      } catch (error) {
        colorLog(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ ${page.id}: ${error.message}`, 'red')
        processedPages.push(page)
      }
    }
    return processedPages
  }

  for (const page of pages) {
    pageCount++
    colorLog(`–û–±—Ä–æ–±–∫–∞ ${pageCount}/${pages.length}: ${page.properties['–ù–∞–∑–≤–∞ –∫–æ–º–∞–Ω–¥–∏']?.title[0]?.plain_text || 
      page.id}`, 'yellow', OUTPUT_MODES.PROGRESS)
  }
  return pages
}

async function getAllRelatedIds(pageId, propertyId) {
  let allIds = []
  let hasMore = true
  let startCursor = undefined
  let retryCount = 0
  const MAX_RETRIES = 3

  while (hasMore && retryCount < MAX_RETRIES) {
    try {
      const response = await Notion.pages.properties.retrieve({
        page_id: pageId,
        property_id: propertyId,
        start_cursor: startCursor,
      })

      allIds = allIds.concat(response.results.map(item => item.relation.id))
      hasMore = response.has_more
      startCursor = response.next_cursor
      retryCount = 0 // –°–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ —Å–ø—Ä–æ–± –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É
      
      // –Ø–∫—â–æ —î —â–µ —Å—Ç–æ—Ä—ñ–Ω–∫–∏, –¥–æ–¥–∞—î–º–æ –Ω–µ–≤–µ–ª–∏–∫—É –∑–∞—Ç—Ä–∏–º–∫—É
      if (hasMore) {
        await new Promise(resolve => setTimeout(resolve, 100))
      }
    } catch (error) {
      retryCount++
      console.error(`–°–ø—Ä–æ–±–∞ ${retryCount} –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–≤'—è–∑–∫–∏ –Ω–µ –≤–¥–∞–ª–∞—Å—è:`, error.message)
      
      if (retryCount < MAX_RETRIES) {
        // –ß–µ–∫–∞—î–º–æ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ—é —Å–ø—Ä–æ–±–æ—é
        await new Promise(resolve => setTimeout(resolve, 1000 * retryCount))
      } else {
        console.error(`–î–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–± –¥–ª—è pageId: ${pageId}`)
        hasMore = false
      }
    }
  }

  return allIds
}

async function fetchHikkaData(urls) {
  const animeData = []
  let count = 0
  
  for (const url of urls) {
    try {
      const slug = url.split('/').pop()
      const response = await axios.get(`${HIKKA_API_URL}/${slug}`)
      const anime = response.data

      animeData.push({
        url,
        poster: anime.poster,
        synonyms: anime.synonyms,
        score: anime.score,
        scored_by: anime.scored_by
      })
      count++
      colorLog(`–û–±—Ä–æ–±–∫–∞: ${count}/${urls.length}. ${anime.title_ua || anime.title_jp || '–ù–µ–≤—ñ–¥–æ–º–æ –¥–ª—è' + anime.id}`, 'green', OUTPUT_MODES.PROGRESS)
    } catch (error) {
      console.error(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö ${anime.title_ua || anime.title_jp || '–ù–µ–≤—ñ–¥–æ–º–æ –¥–ª—è' + anime.id}:`, error.message)
      continue
    }
  }
  return animeData
}

const processAnimeData = async (pages) => {
  let previousHikkaData = []
  const existingDataPath = path.join(__dirname, "../json/AnimeTitlesDB.json")
  previousHikkaData = JSON.parse(await fs.readFile(existingDataPath, "utf8"))

  const hikkaUrls = pages
    .filter(page => {
      const hikkaUrl = page.properties.Hikka?.url
      if (!hikkaUrl) return false
      const existingData = previousHikkaData.find(item => item.url === hikkaUrl)
      return !existingData?.poster
    })
    .map(page => page.properties.Hikka.url)

    console.log(`–ó–Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤–∏—Ö URL –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: ${hikkaUrls.length}`)

  const newHikkaData = hikkaUrls.length === 0 
    ? (console.log("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤–∏—Ö –∑–∞–ø–∏—Å—ñ–≤."), [])
    : (console.log("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö –∑–∞–ø–∏—Å—ñ–≤..."), await fetchHikkaData(hikkaUrls))
  console.log(`–£—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${newHikkaData.length} –∑–∞–ø–∏—Å—ñ–≤`)

  const combinedHikkaData = [
    ...previousHikkaData.filter(item => item.poster),
    ...newHikkaData
  ]

  const results = []
  let count = 0
  for (const page of pages) {
    const hikka_url = page.properties.Hikka?.url
    const hikkaInfo = combinedHikkaData.find(item => item.url === hikka_url)
    count++
    colorLog(`–û–±—Ä–æ–±–∫–∞: ${count}/${pages.length}. ${page.properties['–ù–∞–∑–≤–∞ —Ç–∞–π—Ç–ª—É'].title[0]?.plain_text || '–ù–µ–≤—ñ–¥–æ–º–æ –¥–ª—è' + page.id}`, 'green', OUTPUT_MODES.PROGRESS)
    results.push({
      id: page.id,
      last_edited: page.last_edited_time,
      hikka_url,
      cover: page.cover?.external?.url || page.cover?.file?.url,
      poster: hikkaInfo?.poster,
      title: page.properties['–ù–∞–∑–≤–∞ —Ç–∞–π—Ç–ª—É'].title[0]?.plain_text || '–ë–µ–∑ –Ω–∞–∑–≤–∏',
      romaji: page.properties.–†–æ–º–∞–¥–∂—ñ.rich_text[0]?.plain_text,
      synonyms: page.properties.–°–∏–Ω–æ–Ω—ñ–º–∏.rich_text?.flatMap(i => i.plain_text.split('\n')),
      hikkaSynonyms: hikkaInfo?.synonyms,
      // 
      type: page.properties['–¢–∏–ø –º–µ–¥—ñ–∞'].multi_select[0]?.name,
      format: page.properties.–§–æ—Ä–º–∞—Ç.select?.name,
      year: page.properties['–†—ñ–∫ –≤–∏—Ö–æ–¥—É'].rich_text[0]?.plain_text,
      scoreMAL: hikkaInfo?.score,
      scoredbyMAL: hikkaInfo?.scored_by,
      // 
      –ê–Ω—ñ—Ç—é–±: page.properties.–ê–Ω—ñ–¢—é–±.url,
      –Æ–∞–∫—ñ–Ω–æ: page.properties.Uakino.url,
      —Ç“ë_–∫–∞–Ω–∞–ª: page.properties['Tg –∫–∞–Ω–∞–ª'].url,
      episodes: page.properties['–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–µ—Ä—ñ–π'].rich_text[0]?.plain_text,
      releases: page.properties['üóÇÔ∏è –†–µ–ª—ñ–∑–∏ –∫–æ–º–∞–Ω–¥'].relation,
      relations: page.properties["–ü–æ–≤'—è–∑–∞–Ω—ñ —á–∞—Å—Ç–∏–Ω–∏"].relation,
      –§—Ä–∞–Ω—à–∏–∑–∞: page.properties.–§—Ä–∞–Ω—à–∏–∑–∞.relation,
      posters: page.properties.–ü–æ—Å—Ç–µ—Ä?.files.map(i => ({
        name: i.name,
        url: i.external?.url || i.file.url
      })),
    })
  }
  return results
}

function processReleaseData(pages) {
  const results = []
  let count = 0
  for (const page of pages) {
    count++
    colorLog(`–û–±—Ä–æ–±–∫–∞: ${count}/${pages.length}. ${page.properties['–ù–∞–∑–≤–∞ —Ä–µ–ª—ñ–∑—É'].title[0]?.plain_text || '–ù–µ–≤—ñ–¥–æ–º–æ –¥–ª—è' + page.id}`, 'blue', OUTPUT_MODES.PROGRESS)
    results.push({
      id: page.id,
      last_edited: page.last_edited_time,
      animeIds: page.properties['–¢–∞–π—Ç–ª']?.relation.map(r => r.id) || [],
      title: page.properties['–ù–∞–∑–≤–∞ —Ä–µ–ª—ñ–∑—É'].title[0]?.plain_text || '–ë–µ–∑ –Ω–∞–∑–≤–∏',
      cover: page.cover?.external?.url || page.cover?.file.url,
      teams: page.properties['–ö–æ–º–∞–Ω–¥–∞']?.relation,
      status: page.properties['–°—Ç–∞—Ç—É—Å'].status?.name || '–ù–µ–≤—ñ–¥–æ–º–æ',
      episodes: page.properties['–ö—ñ–ª—å–∫—ñ—Å—Ç—å'].rich_text[0]?.plain_text || '–ù–µ–≤—ñ–¥–æ–º–æ',
      torrent: page.properties['–¢–æ—Ä–µ–Ω—Ç']?.select?.name || '–ù–µ–≤—ñ–¥–æ–º–æ',
      torrentLinks: page.properties['–¢–æ—Ä–µ–Ω—Ç –ø–æ—Å–∏–ª–∞–Ω–Ω—è'].rich_text
        .filter(link => link !== null)
        .map(link => ({
          text: link.plain_text,
          href: link.href
        })),
      posters: page.properties.–ü–æ—Å—Ç–µ—Ä?.files.map(i => ({
        name: i.name,
        url: i.external?.url || i.file.url
      })),
    })
  }
  return results
}

function processTeamData(pages) {
  const results = []
  for (const page of pages) {
    results.push({
      // –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
      id: page.id,
      last_edited: page.last_edited_time,
      cover: page.cover,
      logo: page.icon?.external?.url || page.icon?.file?.url,
      name: page.properties['–ù–∞–∑–≤–∞ –∫–æ–º–∞–Ω–¥–∏']?.title[0]?.plain_text || '–ù–µ–≤—ñ–¥–æ–º–æ',

      // –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
      status: page.properties.–°—Ç–∞—Ç—É—Å.select?.name || '–ù–µ–≤—ñ–¥–æ–º–æ',
      type_activity: page.properties['–¢–∏–ø —Ä–æ–±—ñ—Ç'].multi_select.map(item => item.name) || '–ù–µ–≤—ñ–¥–æ–º–æ',
      members: page.properties['–°–∫–ª–∞–¥ –∫–æ–º–∞–Ω–¥–∏'].relation,
      anime_releases: page.properties['–†–µ–ª—ñ–∑–∏ –∞–Ω—ñ–º–µ'].relation,

      // –°–æ—Ü—ñ–∞–ª—å–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
      site: page.properties.–°–∞–π—Ç?.url,
      anitube: page.properties.AniTube?.url,
      youtube: page.properties.YouTube?.url,
      insta: page.properties.Instagram?.url,
      tg: page.properties.Telegram?.url,
      tg_video: page.properties['–¢“ê —Ä–µ–ª—ñ–∑–∏']?.url,
    })
  }
  return results
}

async function importData(databaseId, dbTitle, outputFileName, propertiesToExpand = [], processFunction) {
  console.log(`–ü–æ—á–∞—Ç–æ–∫ —ñ–º–ø–æ—Ä—Ç—É –¥–∞–Ω–∏—Ö –¥–ª—è ${outputFileName}...`)
  const pages = await getAllPages(databaseId, dbTitle, propertiesToExpand)
  await fs.writeFile(
    path.join(__dirname, '../json', outputFileName),
    JSON.stringify(await processFunction(pages), null, 2)
  )
  console.log('–Ü–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ.')
}

async function importAnimeTitles() {
  const databaseId = process.env.NOTION_ANIME_TITLES_DB
  await importData(databaseId, "–ê–Ω—ñ–º–µ —Ç–∞–π—Ç–ª–∏", "AnimeTitlesDB.json", [], processAnimeData)
}

async function importReleases() {
  const databaseId = process.env.NOTION_ANIME_RELEASES_DB
  await importData(databaseId, "–ê–Ω—ñ–º–µ —Ä–µ–ª—ñ–∑–∏", "AnimeReleasesDB.json", [], processReleaseData)
}

async function importTeams() {
  const databaseId = process.env.NOTION_TEAMS_DB
  await importData(databaseId, "–ö–æ–º–∞–Ω–¥–∏ —Ñ–∞–Ω–¥–∞–±—É", "TeamsDB.json", ["–†–µ–ª—ñ–∑–∏ –∞–Ω—ñ–º–µ"], processTeamData)
}

async function runAllImports() {
  await importAnimeTitles()
  await importReleases()
  await importTeams()
  // getPageById('1427667f-790e-8093-bdf8-fbf745c32f44')
  // .then(page => {
  //   console.log('URL:', JSON.stringify(page, null, 2))
  // })
}

runAllImports()