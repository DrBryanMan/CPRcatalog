const { Client } = require("@notionhq/client")
const axios = require('axios')
const fs = require("fs").promises
const path = require("path")
require("dotenv").config()

const HIKKA_API_URL = 'https://api.hikka.io/anime'
const Notion = new Client({ 
  auth: process.env.NOTION_TOKEN,
  timeoutMs: 60000  // –ó–±—ñ–ª—å—à—É—î–º–æ timeout –¥–æ 60 —Å–µ–∫—É–Ω–¥
 })

async function getPageById(pageId) {
  try {
    const response = await Notion.pages.retrieve({
      page_id: pageId,
    })
    return response
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö:', error)
    throw error
  }
}

async function getAllPages(databaseId, dbTitle, propertiesToExpand = []) {
  let pages = []
  let hasMore = true
  let nextCursor = null
  let pageCount = 0
  
  console.log(`–ü–æ—á–∞—Ç–æ–∫ —ñ–º–ø–æ—Ä—Ç—É —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö ${dbTitle}`)

  // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —Å–ø–æ—á–∞—Ç–∫—É
  while (hasMore) {
    const response = await Notion.databases.query({
      database_id: databaseId,
      start_cursor: nextCursor || undefined,
      // page_size: 100
    })

    pages = pages.concat(response.results)
    hasMore = response.has_more
    nextCursor = response.next_cursor
  }

  // –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ä–æ–∑—à–∏—Ä–∏—Ç–∏ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ, –æ–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ
  if (propertiesToExpand.length > 0) {
    const processedPages = []
    
    for (const page of pages) {
      pageCount++
      
      try {
        // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ø—ñ—é —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –¥–ª—è –æ–±—Ä–æ–±–∫–∏
        const processedPage = { ...page }
        
        for (const propertyName of propertiesToExpand) {
          if (processedPage.properties[propertyName]?.type === 'relation') {
            // –î–æ–¥–∞—î–º–æ –Ω–µ–≤–µ–ª–∏–∫—É –∑–∞—Ç—Ä–∏–º–∫—É –ø–µ—Ä–µ–¥ –∫–æ–∂–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º
            await new Promise(resolve => setTimeout(resolve, 100))
            
            try {
              const expandedRelations = await getAllRelatedIds(processedPage.id, processedPage.properties[propertyName].id)
              processedPage.properties[propertyName].relation = expandedRelations.map(id => ({ id }))
              processedPage.properties[propertyName].has_more = false
            } catch (error) {
              console.error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–≤'—è–∑–∫—ñ–≤ –¥–ª—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ ${processedPage.id}:`, error.message)
              processedPage.properties[propertyName].relation = []
              processedPage.properties[propertyName].has_more = false
            }
          }
        }
        
        processedPages.push(processedPage)
        console.log(`${pageCount} ${processedPage.properties['–ù–∞–∑–≤–∞ —Ç–∞–π—Ç–ª—É']?.title[0]?.plain_text || 
                                  processedPage.properties['Name']?.title[0]?.plain_text || 
                                  processedPage.properties['–ù–∞–∑–≤–∞ –∫–æ–º–∞–Ω–¥–∏']?.title[0]?.plain_text || 
                                  processedPage.id}`)
      } catch (error) {
        console.error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ ${page.id}:`, error.message)
        processedPages.push(page) // –î–æ–¥–∞—î–º–æ –Ω–µ–æ–±—Ä–æ–±–ª–µ–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É, —â–æ–± –Ω–µ –≤—Ç—Ä–∞—Ç–∏—Ç–∏ –¥–∞–Ω—ñ
      }
    }
    
    return processedPages
  }

  // –Ø–∫—â–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ, –ø—Ä–æ—Å—Ç–æ –≤–∏–≤–æ–¥–∏–º–æ –ø—Ä–æ–≥—Ä–µ—Å
  pages.forEach(page => {
    pageCount++
    console.log(`${pageCount} ${page.properties['–ù–∞–∑–≤–∞ —Ç–∞–π—Ç–ª—É']?.title[0]?.plain_text || 
                              page.properties['Name']?.title[0]?.plain_text || 
                              page.properties['–ù–∞–∑–≤–∞ –∫–æ–º–∞–Ω–¥–∏']?.title[0]?.plain_text || 
                              page.id}`)
  })

  return pages
}

async function getAllRelatedIds(pageId, propertyId) {
  let allIds = []
  let hasMore = true
  let startCursor = undefined
  let retryCount = 0
  const MAX_RETRIES = 3

  while (hasMore && retryCount < MAX_RETRIES) {
    try {
      const response = await Notion.pages.properties.retrieve({
        page_id: pageId,
        property_id: propertyId,
        start_cursor: startCursor,
      })

      allIds = allIds.concat(response.results.map(item => item.relation.id))
      hasMore = response.has_more
      startCursor = response.next_cursor
      retryCount = 0 // –°–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ —Å–ø—Ä–æ–± –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É
      
      // –Ø–∫—â–æ —î —â–µ —Å—Ç–æ—Ä—ñ–Ω–∫–∏, –¥–æ–¥–∞—î–º–æ –Ω–µ–≤–µ–ª–∏–∫—É –∑–∞—Ç—Ä–∏–º–∫—É
      if (hasMore) {
        await new Promise(resolve => setTimeout(resolve, 100))
      }
    } catch (error) {
      retryCount++
      console.error(`–°–ø—Ä–æ–±–∞ ${retryCount} –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–≤'—è–∑–∫–∏ –Ω–µ –≤–¥–∞–ª–∞—Å—è:`, error.message)
      
      if (retryCount < MAX_RETRIES) {
        // –ß–µ–∫–∞—î–º–æ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ—é —Å–ø—Ä–æ–±–æ—é
        await new Promise(resolve => setTimeout(resolve, 1000 * retryCount))
      } else {
        console.error(`–î–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–± –¥–ª—è pageId: ${pageId}`)
        hasMore = false
      }
    }
  }

  return allIds
}

async function fetchHikkaData(urls) {
  const animeData = []
  let count = 0
  
  for (const url of urls) {
    try {
      const slug = url.split('/').pop()
      const response = await axios.get(`${HIKKA_API_URL}/${slug}`)
      const anime = response.data

      animeData.push({
        url,
        poster: anime.poster,
        synonyms: anime.synonyms,
        score: anime.score,
        scored_by: anime.scored_by
      })
      
      count++
      console.log(`${count} ${anime.title_ua || anime.title_jp}`)
    } catch (error) {
      console.error(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö ${url}:`, error.message)
      continue
    }
  }

  return animeData
}

async function processAnimeData(pages) {
  let previousHikkaData = []
  const existingDataPath = path.join(__dirname, '../json/AnimeTitlesDB.json')
  previousHikkaData = JSON.parse(await fs.readFile(existingDataPath, 'utf8'))

  const hikkaUrls = pages
  .filter(page => 
    page.properties.Hikka?.url && 
    (!previousHikkaData.some(item => item.hikka_url === page.properties.Hikka.url) || 
     !previousHikkaData.some(item => item.poster))
  )
  // .filter(page => page.properties.Hikka?.url)
  .map(page => page.properties.Hikka.url)

  console.log(`–ó–Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤–∏—Ö URL –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: ${hikkaUrls.length}`)

  const newHikkaData = hikkaUrls.length === 0 
    ? (console.log("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤–∏—Ö –∑–∞–ø–∏—Å—ñ–≤."), [])
    : await fetchHikkaData(hikkaUrls)
    .then(data => {
        console.log(`–£—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${data.length} –∑–∞–ø–∏—Å—ñ–≤`)
        return data
    })

  const combinedHikkaData = [
    ...previousHikkaData.filter(item => item.poster), // –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Å—Ç–∞—Ä—ñ –∑–∞–ø–∏—Å–∏ –∑ –ø–æ—Å—Ç–µ—Ä–æ–º
    ...newHikkaData
  ]

  return pages.map(page => {
    const hikka_url = page.properties.Hikka?.url
    const hikkaInfo = combinedHikkaData.find(item => item.url === hikka_url)
    
    return {
      id: page.id,
      last_edited: page.last_edited_time,
      hikka_url,
      cover: page.cover?.external?.url || page.cover?.file?.url,
      poster: hikkaInfo?.poster,
      title: page.properties['–ù–∞–∑–≤–∞ —Ç–∞–π—Ç–ª—É'].title[0]?.plain_text || '–ë–µ–∑ –Ω–∞–∑–≤–∏',
      romaji: page.properties.–†–æ–º–∞–¥–∂—ñ.rich_text[0]?.plain_text,
      synonyms: page.properties.–°–∏–Ω–æ–Ω—ñ–º–∏.rich_text?.flatMap(i => i.plain_text.split('\n')),
      hikkaSynonyms: hikkaInfo?.synonyms,
      // 
      type: page.properties['–¢–∏–ø –º–µ–¥—ñ–∞'].multi_select[0]?.name,
      format: page.properties.–§–æ—Ä–º–∞—Ç.select?.name,
      year: page.properties['–†—ñ–∫ –≤–∏—Ö–æ–¥—É'].rich_text[0]?.plain_text,
      scoreMAL: hikkaInfo?.score,
      scoredbyMAL: hikkaInfo?.scored_by,
      // 
      –ê–Ω—ñ—Ç—é–±: page.properties.–ê–Ω—ñ–¢—é–±.url,
      –Æ–∞–∫—ñ–Ω–æ: page.properties.Uakino.url,
      —Ç“ë_–∫–∞–Ω–∞–ª: page.properties['Tg –∫–∞–Ω–∞–ª'].url,
      episodes: page.properties['–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–µ—Ä—ñ–π'].rich_text[0]?.plain_text,
      releases: page.properties['üóÇÔ∏è –†–µ–ª—ñ–∑–∏ –∫–æ–º–∞–Ω–¥'].relation,
      relations: page.properties["–ü–æ–≤'—è–∑–∞–Ω—ñ —á–∞—Å—Ç–∏–Ω–∏"].relation,
      –§—Ä–∞–Ω—à–∏–∑–∞: page.properties.–§—Ä–∞–Ω—à–∏–∑–∞.relation,
      posters: page.properties.–ü–æ—Å—Ç–µ—Ä?.files.map(i => ({
        name: i.name,
        url: i.external?.url || i.file.url
      })),
    }
  })
}

function processReleaseData(pages) {
  return pages.map(page => ({
    id: page.id,
    last_edited: page.last_edited_time,
    animeIds: page.properties['–¢–∞–π—Ç–ª']?.relation.map(r => r.id) || [],
    title: page.properties['Name'].title[0]?.plain_text || '–ë–µ–∑ –Ω–∞–∑–≤–∏',
    cover: page.cover?.external?.url || page.cover?.file.url,
    teams: page.properties['–ö–æ–º–∞–Ω–¥–∞']?.relation,
    status: page.properties['–°—Ç–∞—Ç—É—Å'].status?.name || '–ù–µ–≤—ñ–¥–æ–º–æ',
    episodes: page.properties['–ö—ñ–ª—å–∫—ñ—Å—Ç—å'].rich_text[0]?.plain_text || '–ù–µ–≤—ñ–¥–æ–º–æ',
    torrent: page.properties['–¢–æ—Ä–µ–Ω—Ç']?.select?.name || '–ù–µ–≤—ñ–¥–æ–º–æ',
    torrentLinks: page.properties['–¢–æ—Ä–µ–Ω—Ç –ø–æ—Å–∏–ª–∞–Ω–Ω—è'].rich_text
      .filter(link => link !== null)
      .map(link => ({
        text: link.plain_text,
        href: link.href
      })),
    posters: page.properties.–ü–æ—Å—Ç–µ—Ä?.files.map(i => ({
      name: i.name,
      url: i.external?.url || i.file.url
    })),
  }))
}

function processTeamData(pages) {
  return pages.map(page => ({
    // main info
    id: page.id,
    last_edited: page.last_edited_time,
    cover: page.cover,
    logo: page.icon?.external?.url || page.icon?.file?.url,
    name: page.properties['–ù–∞–∑–≤–∞ –∫–æ–º–∞–Ω–¥–∏'].title[0]?.plain_text || '–ù–µ–≤—ñ–¥–æ–º–æ',
    // second info
    status: page.properties.–°—Ç–∞—Ç—É—Å.select?.name || '–ù–µ–≤—ñ–¥–æ–º–æ',
    type_activity: page.properties['–¢–∏–ø —Ä–æ–±—ñ—Ç'].multi_select.map(item => item.name) || '–ù–µ–≤—ñ–¥–æ–º–æ',
    members: page.properties['–°–∫–ª–∞–¥ –∫–æ–º–∞–Ω–¥–∏'].relation,
    anime_releases: page.properties['–†–µ–ª—ñ–∑–∏ –∞–Ω—ñ–º–µ'].relation,
    // social info
    site: page.properties.–°–∞–π—Ç?.url,
    anitube: page.properties.AniTube?.url,
    youtube: page.properties.YouTube?.url,
    insta: page.properties.Instagram?.url,
    tg: page.properties.Telegram?.url,
    tg_video: page.properties['–¢“ê —Ä–µ–ª—ñ–∑–∏']?.url
  }))
}

async function importData(databaseId, dbTitle, outputFileName, propertiesToExpand = [], processFunction) {
  console.log(`–ü–æ—á–∞—Ç–æ–∫ —ñ–º–ø–æ—Ä—Ç—É –¥–∞–Ω–∏—Ö –¥–ª—è ${outputFileName}...`)
  const pages = await getAllPages(databaseId, dbTitle, propertiesToExpand)
  await fs.writeFile(
    path.join(__dirname, '../json', outputFileName),
    JSON.stringify(await processFunction(pages), null, 2)
  )
  console.log('–Ü–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ.')
}

async function importAnimeTitles() {
  const databaseId = process.env.NOTION_ANIME_TITLES_DB
  await importData(databaseId, "–ê–Ω—ñ–º–µ —Ç–∞–π—Ç–ª–∏", "AnimeTitlesDB.json", [], processAnimeData)
}

async function importReleases() {
  const databaseId = process.env.NOTION_ANIME_RELEASES_DB
  await importData(databaseId, "–ê–Ω—ñ–º–µ —Ä–µ–ª—ñ–∑–∏", "AnimeReleasesDB.json", [], processReleaseData)
}

async function importTeams() {
  const databaseId = process.env.NOTION_TEAMS_DB
  await importData(databaseId, "–ö–æ–º–∞–Ω–¥–∏ —Ñ–∞–Ω–¥–∞–±—É", "TeamsDB.json", ["–†–µ–ª—ñ–∑–∏ –∞–Ω—ñ–º–µ"], processTeamData)
}

async function runAllImports() {
  await importAnimeTitles()
  await importReleases()
  await importTeams()
  // getPageById('1427667f-790e-8058-b8ce-fe6be3e789e2')
  // .then(page => {
  //   console.log('URL:', JSON.stringify(page, null, 2))
  // })
}

runAllImports()